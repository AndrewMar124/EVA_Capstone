HIGH: Potentially Unsafe Code - De-Activation of 'magic_quotes'
Line: 2 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\php.ini
The application appears to de-activate the use of 'magic_quotes', greatly increasing the risk of SQL injection.
magic_quotes_gpc = Off

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 14 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vendor\autoload.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
            echo $err;

HIGH: Potentially Unsafe Code - User Controlled Variable Used on System Command Line
Line: 20 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\view_help.php
The application appears to allow the use of an unvalidated user-controlled variable when executing a command.
		eval( '?>' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . "vulnerabilities/{$id}/help/help.php" ) . '<?php ' );

HIGH: Potentially Unsafe Code - User Controlled Variable Used on System Command Line
Line: 22 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\view_help.php
The application appears to allow the use of an unvalidated user-controlled variable when executing a command.
		eval( '?>' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . "vulnerabilities/{$id}/help/help.{$locale}.php" ) . '<?php ' );

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 61 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\view_source.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
	$source = str_replace( array( '$html .=' ), array( 'echo' ), $source );

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 15 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\view_source_all.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
	$lowsrc = str_replace( array( '$html .=' ), array( 'echo' ), $lowsrc);

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 19 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\view_source_all.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
	$medsrc = str_replace( array( '$html .=' ), array( 'echo' ), $medsrc);

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 23 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\view_source_all.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
	$highsrc = str_replace( array( '$html .=' ), array( 'echo' ), $highsrc);

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 27 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\view_source_all.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
	$impsrc = str_replace( array( '$html .=' ), array( 'echo' ), $impsrc);

MEDIUM: Potentially Unsafe Code - Application Variable Used on System Command Line
Line: 291 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\dvwa\includes\dvwaPage.inc.php
The application appears to allow the use of an unvalidated variable when executing a command. Carry out a manual check to determine whether the variable is user-controlled.
		$menuBlocks[ 'vulnerabilities' ][] = array( 'id' => 'exec', 'name' => 'Command Injection', 'url' => 'vulnerabilities/exec/' );

MEDIUM: Potentially Unsafe Code - Application Variable Used on System Command Line
Line: 670 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\dvwa\includes\dvwaPage.inc.php
The application appears to allow the use of an unvalidated variable when executing a command. Carry out a manual check to determine whether the variable is user-controlled.
$DVWAOS           = 'Operating system: <em>' . ( strtoupper( substr (PHP_OS, 0, 3)) === 'WIN' ? 'Windows' : '*nix' ) . '</em>';

MEDIUM: Potentially Unsafe Code - Application Variable Used on System Command Line
Line: 1036 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\dvwa\includes\Parsedown.php
The application appears to allow the use of a variable within backticks, allowing commandline execution. Carry out a manual check to determine whether the variable is user-controlled.
            preg_match_all('/(?:(\\\\[|])|[^|`]|`[^`]++`|`)++/', $row, $matches);

LOW: Potentially Unsafe Code - Variable Used as FileName
Line: 28 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\external\recaptcha\recaptchalib.php
The application appears to use a variable name in order to define a filename used by the application. It is unclear whether this variable can be controlled by the user - carry out a manual inspection to confirm.
		$result  = file_get_contents($url, false, $context);

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 17 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\hackable\flags\fi.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
echo $line3 . "\n\n<br /><br />\n";

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 20 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\hackable\flags\fi.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
echo base64_decode( $line4 );

SUSPICIOUS COMMENT: Comment Indicates Potentially Unfinished Code - 
 Line: 460 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vendor\composer\ClassLoader.php
Search for Hack files if we are running on HHVM

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 19 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vendor\composer\platform_check.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
            echo 'Composer detected issues in your platform:' . PHP_EOL.PHP_EOL . str_replace('You are running '.PHP_VERSION.'.', '', implode(PHP_EOL, $issues)) . PHP_EOL.PHP_EOL;

SUSPICIOUS COMMENT: Comment Indicates Potentially Unfinished Code - 
 Line: 82 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\csrf\index.php
hacks.mozilla.org/2020/08/changes-to-samesite-cookie-behavior/'>Firefox</a></li>

MEDIUM: Potentially Unsafe Code - Application Variable Used on System Command Line
Line: 10 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\exec\index.php
The application appears to allow the use of an unvalidated variable when executing a command. Carry out a manual check to determine whether the variable is user-controlled.
$page[ 'page_id' ] = 'exec';

MEDIUM: Potentially Unsafe Code - Application Variable Used on System Command Line
Line: 11 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\exec\index.php
The application appears to allow the use of an unvalidated variable when executing a command. Carry out a manual check to determine whether the variable is user-controlled.
$page[ 'help_button' ]   = 'exec';

MEDIUM: Potentially Unsafe Code - Application Variable Used on System Command Line
Line: 12 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\exec\index.php
The application appears to allow the use of an unvalidated variable when executing a command. Carry out a manual check to determine whether the variable is user-controlled.
$page[ 'source_button' ] = 'exec';

MEDIUM: Potentially Unsafe Code - Application Variable Used on System Command Line
Line: 32 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\exec\index.php
The application appears to allow the use of an unvalidated variable when executing a command. Carry out a manual check to determine whether the variable is user-controlled.
require_once DVWA_WEB_PAGE_TO_ROOT . "vulnerabilities/exec/source/{$vulnerabilityFile}";

LOW: Potentially Unsafe Code - Variable Used as FileName
Line: 36 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\fi\index.php
The application appears to use a variable name in order to define a filename used by the application. It is unclear whether this variable can be controlled by the user - carry out a manual inspection to confirm.
	include( $file );

MEDIUM: Potentially Unsafe Code - Code Appears to Contain Hard-Coded Password
Line: 4 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\sqli\test.php
The code may contain a hard-coded password which an attacker could obtain from the source or by dis-assembling the executable. Please manually review the code:
$password = "password";

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 12 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\sqli\test.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
	echo $record["first_name"] .", ". $record["password"] ."<br />";

CRITICAL: Potentially Unsafe Code - Potential SQL Injection
Line: 18 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\dvwa\includes\DBMS\PGSQL.php
The application appears to allow SQL injection via dynamic SQL statements.
if( !@pg_query($drop_db) ) {

CRITICAL: Potentially Unsafe Code - Potential SQL Injection
Line: 25 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\dvwa\includes\DBMS\PGSQL.php
The application appears to allow SQL injection via dynamic SQL statements.
if( !@pg_query ( $create_db ) ) {

CRITICAL: Potentially Unsafe Code - Potential SQL Injection
Line: 41 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\dvwa\includes\DBMS\PGSQL.php
The application appears to allow SQL injection via dynamic SQL statements.
if( !pg_query($drop_table) ) {

CRITICAL: Potentially Unsafe Code - Potential SQL Injection
Line: 48 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\dvwa\includes\DBMS\PGSQL.php
The application appears to allow SQL injection via dynamic SQL statements.
if( !pg_query( $create_tb ) ) {

CRITICAL: Potentially Unsafe Code - Potential SQL Injection
Line: 66 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\dvwa\includes\DBMS\PGSQL.php
The application appears to allow SQL injection via dynamic SQL statements.
if( !pg_query( $insert ) ) {

CRITICAL: Potentially Unsafe Code - Potential SQL Injection
Line: 77 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\dvwa\includes\DBMS\PGSQL.php
The application appears to allow SQL injection via dynamic SQL statements.
if( !@pg_query($drop_table) ) {

CRITICAL: Potentially Unsafe Code - Potential SQL Injection
Line: 84 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\dvwa\includes\DBMS\PGSQL.php
The application appears to allow SQL injection via dynamic SQL statements.
if( !pg_query( $create_tb_guestbook ) ) {

CRITICAL: Potentially Unsafe Code - Potential SQL Injection
Line: 94 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\dvwa\includes\DBMS\PGSQL.php
The application appears to allow SQL injection via dynamic SQL statements.
if( !pg_query( $insert ) ) {

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 24 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\check_token_high.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
print $ret;

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 24 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\check_token_impossible.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
print $ret;

LOW: Potentially Unsafe Code - Variable Used as FileName
Line: 5 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\download_ecb_attack.php
The application appears to use a variable name in order to define a filename used by the application. It is unclear whether this variable can be controlled by the user - carry out a manual inspection to confirm.
$fp = fopen($name, 'rb');

LOW: Potentially Unsafe Code - Variable Used as FileName
Line: 5 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\download_oracle_attack.php
The application appears to use a variable name in order to define a filename used by the application. It is unclear whether this variable can be controlled by the user - carry out a manual inspection to confirm.
$fp = fopen($name, 'rb');

MEDIUM: Potentially Unsafe Code - Code Appears to Contain Hard-Coded Password
Line: 41 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\low.php
The code may contain a hard-coded password which an attacker could obtain from the source or by dis-assembling the executable. Please manually review the code:
			if ($password == "Olifant") {

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 103 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\oracle_attack.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
		print ("Looking at offset $offset for padding $padding\n");

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 114 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\oracle_attack.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
					print "Got hit for: " . $i . "\n";

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 171 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\oracle_attack.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
						# print "IV: " . byte_array_to_string ($iv) . "\n";

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 172 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\oracle_attack.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
						# print "Zero: " . byte_array_to_string ($zeroing) . "\n";

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 187 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\oracle_attack.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
	print "Derived IV is: " . byte_array_to_string ($iv) . "\n";

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 191 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\oracle_attack.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
	# print "Derived IV XOR and zeroing string: " . byte_array_to_string ($x) . "\n";

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 193 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\oracle_attack.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
	print "Real IV is: " . byte_array_to_string ($init_iv) . "\n";

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 194 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\oracle_attack.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
	print "Zeroing array is: " . byte_array_to_string ($zeroing) . "\n";

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 198 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\oracle_attack.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
	print "Decrypted string with padding: " . byte_array_to_string ($x) . "\n";

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 201 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\oracle_attack.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
	print "Decrypted string without padding: " . byte_array_to_string ($without_padding) . "\n";

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 213 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\oracle_attack.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
	print "Decrypted string as text: " . $str . "\n";

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 224 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\oracle_attack.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
	print "New clear text: " . $new_clear . "\n";

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 235 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\oracle_attack.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
	print "New IV is: " . byte_array_to_string ($zeroing) . "\n";

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 40 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\token_library_high.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
		print "Clear text token: " . $token . "\n";

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 21 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\cryptography\source\xor_theory.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
print "Clear text\n" . $clear . "\n";

MEDIUM: Potentially Unsafe Code - Application Variable Used on System Command Line
Line: 26 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\exec\source\high.php
The application appears to allow the use of an unvalidated variable when executing a command. Carry out a manual check to determine whether the variable is user-controlled.
		$cmd = shell_exec( 'ping  ' . $target );

MEDIUM: Potentially Unsafe Code - Application Variable Used on System Command Line
Line: 30 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\exec\source\high.php
The application appears to allow the use of an unvalidated variable when executing a command. Carry out a manual check to determine whether the variable is user-controlled.
		$cmd = shell_exec( 'ping  -c 4 ' . $target );

HIGH: Potentially Unsafe Code - User Controlled Variable Used on System Command Line
Line: 22 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\exec\source\impossible.php
The application appears to allow the use of an unvalidated user-controlled variable when executing a command.
			$cmd = shell_exec( 'ping  ' . $target );

HIGH: Potentially Unsafe Code - User Controlled Variable Used on System Command Line
Line: 26 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\exec\source\impossible.php
The application appears to allow the use of an unvalidated user-controlled variable when executing a command.
			$cmd = shell_exec( 'ping  -c 4 ' . $target );

HIGH: Potentially Unsafe Code - User Controlled Variable Used on System Command Line
Line: 10 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\exec\source\low.php
The application appears to allow the use of an unvalidated user-controlled variable when executing a command.
		$cmd = shell_exec( 'ping  ' . $target );

HIGH: Potentially Unsafe Code - User Controlled Variable Used on System Command Line
Line: 14 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\exec\source\low.php
The application appears to allow the use of an unvalidated user-controlled variable when executing a command.
		$cmd = shell_exec( 'ping  -c 4 ' . $target );

HIGH: Potentially Unsafe Code - User Controlled Variable Used on System Command Line
Line: 19 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\exec\source\medium.php
The application appears to allow the use of an unvalidated user-controlled variable when executing a command.
		$cmd = shell_exec( 'ping  ' . $target );

HIGH: Potentially Unsafe Code - User Controlled Variable Used on System Command Line
Line: 23 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\exec\source\medium.php
The application appears to allow the use of an unvalidated user-controlled variable when executing a command.
		$cmd = shell_exec( 'ping  -c 4 ' . $target );

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 29 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\sqli\source\high.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
			#print $query;

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 33 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\sqli\source\high.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
				echo 'Caught exception: ' . $e->getMessage();

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 47 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\sqli\source\high.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
				echo "Error in fetch ".$sqlite_db->lastErrorMsg();

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 32 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\sqli\source\low.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
			#print $query;

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 36 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\sqli\source\low.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
				echo 'Caught exception: ' . $e->getMessage();

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 50 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\sqli\source\low.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
				echo "Error in fetch ".$sqlite_db->lastErrorMsg();

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 28 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\sqli\source\medium.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
			#print $query;

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 32 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\sqli\source\medium.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
				echo 'Caught exception: ' . $e->getMessage();

MEDIUM: Potentially Unsafe Code - Potential XSS
Line: 46 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vulnerabilities\sqli\source\medium.php
The application appears to reflect data to the screen with no apparent validation or sanitisation. It was not clear if this variable is controlled by the user.
				echo "Error in fetch ".$sqlite_db->lastErrorMsg();

LOW: Potentially Unsafe Code - Variable Used as FileName
Line: 84 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vendor\nette\utils\src\Utils\FileSystem.php
The application appears to use a variable name in order to define a filename used by the application. It is unclear whether this variable can be controlled by the user - carry out a manual inspection to confirm.
$f = @fopen($path, $mode);

LOW: Potentially Unsafe Code - Variable Used as FileName
Line: 164 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vendor\nette\utils\src\Utils\FileSystem.php
The application appears to use a variable name in order to define a filename used by the application. It is unclear whether this variable can be controlled by the user - carry out a manual inspection to confirm.
$content = @file_get_contents($file);

LOW: Potentially Unsafe Code - Variable Used as FileName
Line: 451 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vendor\nette\utils\src\Utils\Finder.php
The application appears to use a variable name in order to define a filename used by the application. It is unclear whether this variable can be controlled by the user - carry out a manual inspection to confirm.
					? glob($base, GLOB_NOSORT | GLOB_ONLYDIR | GLOB_NOESCAPE)

LOW: Potentially Unsafe Code - Variable Used as FileName
Line: 205 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vendor\nette\utils\src\Utils\Reflection.php
The application appears to use a variable name in order to define a filename used by the application. It is unclear whether this variable can be controlled by the user - carry out a manual inspection to confirm.
				$code = file_get_contents($class->getFileName());

MEDIUM: Potentially Unsafe Code - Application Variable Used on System Command Line
Line: 98 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vendor\nette\utils\src\Utils\Validators.php
The application appears to allow the use of an unvalidated variable when executing a command. Carry out a manual check to determine whether the variable is user-controlled.
	public static function assert(mixed $value, string $expected, string $label = 'variable'): void

MEDIUM: Potentially Unsafe Code - Application Variable Used on System Command Line
Line: 131 - Z:\home\stud\EVA_Capstone\VulnerableCode\VPHPA\vendor\nette\utils\src\Utils\Validators.php
The application appears to allow the use of an unvalidated variable when executing a command. Carry out a manual check to determine whether the variable is user-controlled.
			static::assert($array[$key], $expected, str_replace('%', $key, $label));


